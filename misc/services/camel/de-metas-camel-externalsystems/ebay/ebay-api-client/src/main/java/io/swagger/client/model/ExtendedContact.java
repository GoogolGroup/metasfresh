/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.19.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Address;
import io.swagger.client.model.PhoneNumber;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * This type contains shipping and contact information for a buyer or an eBay shipping partner.
 */
@Schema(description = "This type contains shipping and contact information for a buyer or an eBay shipping partner.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-03-02T10:53:33.276748+01:00[Europe/Berlin]")
public class ExtendedContact {
  @SerializedName("companyName")
  private String companyName = null;

  @SerializedName("contactAddress")
  private Address contactAddress = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("fullName")
  private String fullName = null;

  @SerializedName("primaryPhone")
  private PhoneNumber primaryPhone = null;

  public ExtendedContact companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

   /**
   * The company name associated with the buyer or eBay shipping partner. This field is only returned if defined/applicable to the buyer or eBay shipping partner.
   * @return companyName
  **/
  @Schema(description = "The company name associated with the buyer or eBay shipping partner. This field is only returned if defined/applicable to the buyer or eBay shipping partner.")
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }

  public ExtendedContact contactAddress(Address contactAddress) {
    this.contactAddress = contactAddress;
    return this;
  }

   /**
   * Get contactAddress
   * @return contactAddress
  **/
  @Schema(description = "")
  public Address getContactAddress() {
    return contactAddress;
  }

  public void setContactAddress(Address contactAddress) {
    this.contactAddress = contactAddress;
  }

  public ExtendedContact email(String email) {
    this.email = email;
    return this;
  }

   /**
   * This field shows the email address of the buyer. The email address of a buyer will be masked 14 days after order creation. This field will still be returned for the order, but it will not contain the buyer&#x27;s email address, but instead, something like &#x27;Invalid Request&#x27;. Note: This field always contains the email address of the buyer even with a Global Shipping Program shipment.
   * @return email
  **/
  @Schema(description = "This field shows the email address of the buyer. The email address of a buyer will be masked 14 days after order creation. This field will still be returned for the order, but it will not contain the buyer's email address, but instead, something like 'Invalid Request'. Note: This field always contains the email address of the buyer even with a Global Shipping Program shipment.")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public ExtendedContact fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

   /**
   * The full name of the buyer or eBay shipping partner.
   * @return fullName
  **/
  @Schema(description = "The full name of the buyer or eBay shipping partner.")
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }

  public ExtendedContact primaryPhone(PhoneNumber primaryPhone) {
    this.primaryPhone = primaryPhone;
    return this;
  }

   /**
   * Get primaryPhone
   * @return primaryPhone
  **/
  @Schema(description = "")
  public PhoneNumber getPrimaryPhone() {
    return primaryPhone;
  }

  public void setPrimaryPhone(PhoneNumber primaryPhone) {
    this.primaryPhone = primaryPhone;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExtendedContact extendedContact = (ExtendedContact) o;
    return Objects.equals(this.companyName, extendedContact.companyName) &&
        Objects.equals(this.contactAddress, extendedContact.contactAddress) &&
        Objects.equals(this.email, extendedContact.email) &&
        Objects.equals(this.fullName, extendedContact.fullName) &&
        Objects.equals(this.primaryPhone, extendedContact.primaryPhone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(companyName, contactAddress, email, fullName, primaryPhone);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExtendedContact {\n");
    
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    contactAddress: ").append(toIndentedString(contactAddress)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    primaryPhone: ").append(toIndentedString(primaryPhone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
