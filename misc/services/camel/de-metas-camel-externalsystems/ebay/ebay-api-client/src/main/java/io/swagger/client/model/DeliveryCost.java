/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.19.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Amount;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * This type contains a breakdown of all costs associated with the fulfillment of a line item.
 */
@Schema(description = "This type contains a breakdown of all costs associated with the fulfillment of a line item.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-03-02T10:53:33.276748+01:00[Europe/Berlin]")
public class DeliveryCost {
  @SerializedName("importCharges")
  private Amount importCharges = null;

  @SerializedName("shippingCost")
  private Amount shippingCost = null;

  @SerializedName("shippingIntermediationFee")
  private Amount shippingIntermediationFee = null;

  public DeliveryCost importCharges(Amount importCharges) {
    this.importCharges = importCharges;
    return this;
  }

   /**
   * Get importCharges
   * @return importCharges
  **/
  @Schema(description = "")
  public Amount getImportCharges() {
    return importCharges;
  }

  public void setImportCharges(Amount importCharges) {
    this.importCharges = importCharges;
  }

  public DeliveryCost shippingCost(Amount shippingCost) {
    this.shippingCost = shippingCost;
    return this;
  }

   /**
   * Get shippingCost
   * @return shippingCost
  **/
  @Schema(description = "")
  public Amount getShippingCost() {
    return shippingCost;
  }

  public void setShippingCost(Amount shippingCost) {
    this.shippingCost = shippingCost;
  }

  public DeliveryCost shippingIntermediationFee(Amount shippingIntermediationFee) {
    this.shippingIntermediationFee = shippingIntermediationFee;
    return this;
  }

   /**
   * Get shippingIntermediationFee
   * @return shippingIntermediationFee
  **/
  @Schema(description = "")
  public Amount getShippingIntermediationFee() {
    return shippingIntermediationFee;
  }

  public void setShippingIntermediationFee(Amount shippingIntermediationFee) {
    this.shippingIntermediationFee = shippingIntermediationFee;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeliveryCost deliveryCost = (DeliveryCost) o;
    return Objects.equals(this.importCharges, deliveryCost.importCharges) &&
        Objects.equals(this.shippingCost, deliveryCost.shippingCost) &&
        Objects.equals(this.shippingIntermediationFee, deliveryCost.shippingIntermediationFee);
  }

  @Override
  public int hashCode() {
    return Objects.hash(importCharges, shippingCost, shippingIntermediationFee);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeliveryCost {\n");
    
    sb.append("    importCharges: ").append(toIndentedString(importCharges)).append("\n");
    sb.append("    shippingCost: ").append(toIndentedString(shippingCost)).append("\n");
    sb.append("    shippingIntermediationFee: ").append(toIndentedString(shippingIntermediationFee)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
