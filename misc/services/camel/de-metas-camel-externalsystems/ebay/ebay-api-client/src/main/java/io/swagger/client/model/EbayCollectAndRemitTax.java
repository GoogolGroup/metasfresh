/*
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.19.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Amount;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * This type contains information about the type and amount of tax that eBay will collect and remit to the state, province, country, or other taxing authority in the buyer&#x27;s location, as required by that taxing authority. &#x27;Collect and Remit&#x27; tax includes US state-mandated sales tax and &#x27;Goods and Services&#x27; tax that is applicable to Australian and New Zealand sellers.
 */
@Schema(description = "This type contains information about the type and amount of tax that eBay will collect and remit to the state, province, country, or other taxing authority in the buyer's location, as required by that taxing authority. 'Collect and Remit' tax includes US state-mandated sales tax and 'Goods and Services' tax that is applicable to Australian and New Zealand sellers.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-03-02T10:53:33.276748+01:00[Europe/Berlin]")
public class EbayCollectAndRemitTax {
  @SerializedName("amount")
  private Amount amount = null;

  @SerializedName("taxType")
  private String taxType = null;

  @SerializedName("collectionMethod")
  private String collectionMethod = null;

  public EbayCollectAndRemitTax amount(Amount amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @Schema(description = "")
  public Amount getAmount() {
    return amount;
  }

  public void setAmount(Amount amount) {
    this.amount = amount;
  }

  public EbayCollectAndRemitTax taxType(String taxType) {
    this.taxType = taxType;
    return this;
  }

   /**
   * The type of tax and fees that eBay will collect and remit to the taxing or fee authority. See the TaxTypeEnum type definition for more information about each tax or fee type. For implementation help, refer to &lt;a href&#x3D;&#x27;https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:TaxTypeEnum&#x27;&gt;eBay API documentation&lt;/a&gt;
   * @return taxType
  **/
  @Schema(description = "The type of tax and fees that eBay will collect and remit to the taxing or fee authority. See the TaxTypeEnum type definition for more information about each tax or fee type. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:TaxTypeEnum'>eBay API documentation</a>")
  public String getTaxType() {
    return taxType;
  }

  public void setTaxType(String taxType) {
    this.taxType = taxType;
  }

  public EbayCollectAndRemitTax collectionMethod(String collectionMethod) {
    this.collectionMethod = collectionMethod;
    return this;
  }

   /**
   * This field indicates the collection method used to collect the &#x27;Collect and Remit&#x27; tax for the order. This field is always returned for orders subject to &#x27;Collect and Remit&#x27; tax, and its value is always NET. Note: Although the collectionMethod field is returned for all orders subject to &#x27;Collect and Remit&#x27; tax, the collectionMethod field and the CollectionMethodEnum type are not currently of any practical use, although this field may have use in the future. If and when the logic of this field is changed, this note will be updated and a note will also be added to the Release Notes. For implementation help, refer to &lt;a href&#x3D;&#x27;https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:CollectionMethodEnum&#x27;&gt;eBay API documentation&lt;/a&gt;
   * @return collectionMethod
  **/
  @Schema(description = "This field indicates the collection method used to collect the 'Collect and Remit' tax for the order. This field is always returned for orders subject to 'Collect and Remit' tax, and its value is always NET. Note: Although the collectionMethod field is returned for all orders subject to 'Collect and Remit' tax, the collectionMethod field and the CollectionMethodEnum type are not currently of any practical use, although this field may have use in the future. If and when the logic of this field is changed, this note will be updated and a note will also be added to the Release Notes. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:CollectionMethodEnum'>eBay API documentation</a>")
  public String getCollectionMethod() {
    return collectionMethod;
  }

  public void setCollectionMethod(String collectionMethod) {
    this.collectionMethod = collectionMethod;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EbayCollectAndRemitTax ebayCollectAndRemitTax = (EbayCollectAndRemitTax) o;
    return Objects.equals(this.amount, ebayCollectAndRemitTax.amount) &&
        Objects.equals(this.taxType, ebayCollectAndRemitTax.taxType) &&
        Objects.equals(this.collectionMethod, ebayCollectAndRemitTax.collectionMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, taxType, collectionMethod);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EbayCollectAndRemitTax {\n");
    
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    taxType: ").append(toIndentedString(taxType)).append("\n");
    sb.append("    collectionMethod: ").append(toIndentedString(collectionMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
